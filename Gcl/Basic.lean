import Gcl.Syntax
import Gcl.ProgramGraph
import Lean.PrettyPrinter.Parenthesizer
import Mathlib.Algebra.BigOperators.Group.Finset.Defs
import Mathlib.Data.Finset.Card
import Mathlib.Data.Finset.Union
import Mathlib.Data.Fintype.Card
import Mathlib.Data.List.Sort
import Mathlib.Data.PFun
import Mathlib.Data.Finite.Prod
import Mathlib.Order.FixedPoints
import Mathlib.Data.Fintype.Powerset

instance : IsTotal String LE.le := by
  constructor
  intro a b
  exact String.le_total a b

instance : IsTrans String LE.le := by
  constructor
  intro a b c hab hbc
  exact String.le_trans hab hbc

def Function.Dom (f : Œ± ‚Üí Option Œ≤) : Set Œ± := {a : Œ± | (f a).isSome}

@[simp]
theorem Finset.union_biUnion (Œ± Œ≤ : Type*) [DecidableEq Œ±] [DecidableEq Œ≤] (S‚ÇÅ S‚ÇÇ : Finset Œ±)
    (f : Œ± ‚Üí Finset Œ≤) : (S‚ÇÅ ‚à™ S‚ÇÇ).biUnion f = (S‚ÇÅ.biUnion f) ‚à™ (S‚ÇÇ.biUnion f) := by
  ext
  simp_all
  aesop

namespace Relation.ReflTransGen

variable [instFintype : Fintype Œ±] [DecidableEq Œ±]
variable (r : Œ± ‚Üí Œ± ‚Üí Prop) [DecidableRel r]

def with_next : Finset Œ± ‚Üío Finset Œ± :=
  ‚ü®fun S ‚Ü¶ S ‚à™ S.biUnion (fun s ‚Ü¶ instFintype.elems.filter (r s)), by
    intro a b h x hx
    simp_all [Fintype.complete]
    rcases hx with hx | ‚ü®y, hy, hxy‚ü©
    ¬∑ left; exact h hx
    ¬∑ right; use y, h hy, hxy‚ü©

def reachable_n (S : Finset Œ±) : ‚Ñï ‚Üí Finset Œ±
| 0 => S
| n + 1 => reachable_n (with_next r S) n

def reachable (S : Finset Œ±) : Finset Œ± :=
  let next : Finset Œ± := with_next r S
  if _ : S = next then
    S
  else
    reachable next
termination_by instFintype.card - S.card
decreasing_by
  have h‚ÇÅ : (with_next r S).card ‚â§ instFintype.card := by
    apply Finset.card_le_card; intro; simp [Fintype.complete]
  have h‚ÇÇ : S.card ‚â§ instFintype.card := by
    apply Finset.card_le_card; intro; simp [Fintype.complete]
  have h‚ÇÉ : S.card < (with_next r S).card := by
    apply Finset.card_lt_card
    refine Finset.ssubset_iff_subset_ne.mpr ?_
    simp_all [next, with_next]
  omega

@[simp] theorem reachable_n_zero : reachable_n r S 0 = S := rfl
@[simp]
theorem reachable_n_union : reachable_n r (S‚ÇÅ ‚à™ S‚ÇÇ) n = reachable_n r S‚ÇÅ n ‚à™ reachable_n r S‚ÇÇ n := by
  induction n generalizing S‚ÇÅ S‚ÇÇ with
  | zero => simp_all
  | succ n ih =>
    simp_all [reachable_n, with_next]
    ext x
    simp_all
    aesop
@[simp]
theorem reachable_union : reachable r (S‚ÇÅ ‚à™ S‚ÇÇ) = reachable r S‚ÇÅ ‚à™ reachable r S‚ÇÇ := by
  ext s'
  simp_all
  induction S‚ÇÇ using Finset.induction generalizing s' S‚ÇÅ with
  | empty =>
    simp_all
    rw [reachable]
    simp [with_next]
  | insert =>
    simp_all
    -- simp [with_next]
    -- aesop
    sorry
  -- induction n generalizing S‚ÇÅ S‚ÇÇ with
  -- | zero => simp_all
  -- | succ n ih =>
  --   simp_all [reachable_n, with_next]
  --   ext x
  --   simp_all
  --   aesop

theorem reachable_eq_reachable_n' (s' : Œ±) : s' ‚àà reachable r S ‚Üî ‚àÉ i, s' ‚àà reachable_n r S i := by
  constructor
  ¬∑ intro h
    use instFintype.card
    sorry
    -- induction S using reachable.induct r
    -- ¬∑ rename_i S S' h'
    --   simp_all [with_next, S']
    -- ¬∑ sorry
  ¬∑ simp_all
    intro n h
    sorry
    -- induction S using reachable.induct r
    -- induction n generalizing S with
    -- | zero =>
    --   simp_all
    --   rw [reachable]
    --   simp_all [with_next]
    --   split_ifs with h' <;> simp_all

    --   obtain ‚ü®s‚ÇÄ, h‚ÇÅ, h‚ÇÇ‚ü© := h'
    --   rw [@Finset.not_subset] at h‚ÇÇ
    --   simp_all [Fintype.complete]
    --   obtain ‚ü®s‚ÇÅ, h‚ÇÇ, h‚ÇÉ‚ü© := h‚ÇÇ

    --   sorry
    -- | succ n ih =>
    --   sorry
theorem reachable_eq_reachable_n : reachable r S = ‚®Ü n, (reachable_n r S n).toSet := by
  ext s
  simp_all [reachable_eq_reachable_n']

def self_subset_reachable (S : Finset Œ±) :
    S ‚äÜ reachable r S := by
  intro x h
  simp [reachable_eq_reachable_n']
  use 0
  simp [reachable_n, h]

def reachable_complete (S : Finset Œ±) :
    s' ‚àà reachable r S ‚Üî s' ‚àà {s' | ‚àÉ s ‚àà S, Relation.ReflTransGen r s s'} := by
  simp_all
  simp_all [reachable_eq_reachable_n']
  constructor
  ¬∑ simp_all
    intro n h
    induction n generalizing s' S with
    | zero => simp_all [reachable_n]; use s'
    | succ n ih =>
      simp_all [reachable_n, with_next]
      have := ih (s':=s') (with_next r S)
      clear ih
      simp_all [with_next]
      obtain ‚ü®s'', _ | ‚ü®s''', h, h'', h'''‚ü©, h'‚ü© := this
      ¬∑ use s''
      ¬∑ use s''', h
        exact head h''' h'
  ¬∑ simp_all
    intro s hs h
    induction h generalizing S hs with
    | refl => use 0; simp_all
    | tail h hr ih =>
      rename_i s'' s'''
      sorry
      -- obtain ih := ih (with_next r S)
      -- simp_all [with_next]
      -- obtain ‚ü®n, ih | ih‚ü© := ih
      -- ¬∑ use n + 1
      --   simp_all [reachable_n, with_next]
      --   right
      -- simp_all
      -- use n + 1
      -- simp [reachable_n, with_next]
      -- right
  -- constructor
  -- ¬∑ intro h
  --   sorry
  -- ¬∑ simp_all
  --   intro s h h'
  --   induction h' with
  --   | refl =>
  --     unfold reachable; simp_all
  --     split_ifs
  --     ¬∑ assumption
  --     ¬∑ simp_all
  --   | tail => sorry

instance : Decidable (s' ‚àà reachable r {s}) := Finset.decidableMem s' (reachable r {s})

def asdjkasd : Relation.ReflTransGen r s s' ‚Üî s' ‚àà reachable r {s} := by
  simp [reachable_complete]

def decidable [instFintype : Fintype Œ±] [DecidableEq Œ±] (r : Œ± ‚Üí Œ± ‚Üí Prop) [DecidableRel r] :
    Decidable (Relation.ReflTransGen r s‚ÇÅ s‚ÇÇ) :=
  if h : s‚ÇÇ ‚àà reachable r {s‚ÇÅ} then
    .isTrue (by simp_all [asdjkasd])
  else
    .isFalse (by simp_all [asdjkasd])

  -- let all := { (s, s') | Relation.ReflTransGen r s s' }
  -- have : (instFintype.elems.toSet √óÀ¢ instFintype.elems.toSet).Finite :=
  --   Set.toFinite _
  -- have : all.Finite := by simp [all]; exact Set.toFinite _
  -- have : Fintype all := ‚ü®all, sorry‚ü©
  -- have : Decidable ((s‚ÇÅ, s‚ÇÇ) ‚àà all) := by
  --   simp only [all]
  --   have := Finset.decidableMem (s‚ÇÅ, s‚ÇÇ) all.toFinset
  --   exact {x | Relation.ReflTransGen r x.1 x.2}.decidableMemOfFintype (s‚ÇÅ, s‚ÇÇ)
  -- if h : (s‚ÇÅ, s‚ÇÇ) ‚àà all then
  --   .isTrue (by simp_all [all])
  -- else
  --   .isFalse (by simp_all [all])
  -- if h : s‚ÇÅ ‚àà reachable r {s‚ÇÅ} then
  --   .isTrue (by

  --     )
  -- else
  --   .isFalse sorry
  -- let next : Finset Œ± := instFintype.elems.filter (r s‚ÇÅ)
  -- if s‚ÇÇ ‚àà

end Relation.ReflTransGen

namespace GCL

def Graph.run (g : Graph) (c : Configuration) : ‚Ñï ‚Üí DSet Configuration
| 0 => {c}
| n + 1 =>
  let res := (g.succs c).flatMap fun c' ‚Ü¶ g.run c' n
  -- let res := g.run c n |>.flatMap fun c' ‚Ü¶ g.succs c'
  if res = {} then {c} else res

#eval
  let œÉ' : Mem := mem {x ‚Ü¶ 0, y ‚Ü¶ 0}
  let G := gcl { x := 12; x := x + 2 }.graph
  G.run ‚ü®q‚ñπ, œÉ'‚ü© 10

def Graph.Deterministic (g : Graph) : Prop := ‚àÄ (œÉ œÉ' œÉ'' : Mem) (œâ' œâ'' : List Act),
  œâTransition g ‚ü®q‚ñπ, œÉ‚ü© ‚ü®q‚óÇ, œÉ'‚ü© œâ' ‚Üí œâTransition g ‚ü®q‚ñπ, œÉ‚ü© ‚ü®q‚óÇ, œÉ''‚ü© œâ'' ‚Üí œÉ' = œÉ'' ‚àß œâ' = œâ''

def Graph.of_deterministic (g : Graph)
  (h : ‚àÄ e‚ÇÅ ‚àà g.edges, ‚àÄ e‚ÇÇ ‚àà g.edges, (e‚ÇÅ.action, e‚ÇÅ.target) ‚â† (e‚ÇÇ.action, e‚ÇÇ.target) ‚Üí
    (ùíÆ e‚ÇÅ.action).Dom ‚à© (ùíÆ e‚ÇÇ.action).Dom = ‚àÖ) : g.Deterministic := by
  simp [Deterministic]
  simp_all
  intro œÉ œÉ' œÉ'' œâ' œâ'' h' h''
  cases h'; cases h''
  simp_all
  rename_i h' _ _ _ _ h'' _
  simp_all [Transition]
  have := h _ h'.left _ h''.left
  simp_all [Function.Dom]
  contrapose this
  simp_all
  rw [@Set.eq_empty_iff_forall_not_mem]
  simp_all
  sorry

theorem Graph.dgraph_deterministic (p : Command) : p.dgraph.Deterministic := by
  apply p.dgraph.of_deterministic
  simp_all [Function.Dom, Set.eq_empty_iff_forall_not_mem, Option.isSome_iff_exists]
  intro e‚ÇÅ h‚ÇÅ e‚ÇÇ h‚ÇÇ h œÉ œÉ‚ÇÅ h‚ÇÅ' œÉ‚ÇÇ h‚ÇÇ'
  sorry



structure Mem' (Œ± : Type*) where
  dom : List String
  sorted : dom.Sorted String.le
  dedup : dom.Nodup
  read : {v // v ‚àà dom} ‚Üí Œ±
deriving DecidableEq

def Mem.map' (f : ‚Ñ§ ‚Üí Œ±) (œÉ : Mem) : Mem' Œ± where
  dom := œÉ.dom
  sorted := œÉ.sorted
  dedup := œÉ.dedup
  read := f ‚àò œÉ.read

def Mem'.concrete (f : Œ± ‚Üí ‚Ñ§) (œÉ : Mem' Œ±) : Mem where
  dom := œÉ.dom
  sorted := œÉ.sorted
  dedup := œÉ.dedup
  read := f ‚àò œÉ.read

def Mem'.flatConcrete (f : Œ± ‚Üí DSet ‚Ñ§) (œÉ : Mem' Œ±) : DSet Mem :=
  let x : List ({v // v ‚àà œÉ.dom} √ó DSet ‚Ñ§) := œÉ.dom.attach.map (fun v ‚Ü¶ (v, f (œÉ.read v)))
  x.foldl (fun acc ‚ü®v, S‚ü© ‚Ü¶
    let y : DSet (Mem √ó {v // v ‚àà œÉ.dom} √ó ‚Ñ§) := acc √óÀ¢ ({v} √óÀ¢ S)
    y.image (fun ‚ü®acc, v, z‚ü© ‚Ü¶ acc[v ‚Ü¶ z])
    ) ({œÉ.concrete (fun _ ‚Ü¶ 0)})
  -- let x : List (DSet ({v // v ‚àà œÉ.dom} √ó ‚Ñ§)) := œÉ.dom.attach.map (fun v ‚Ü¶ {v} √óÀ¢ f (œÉ.read v))
  -- let y : DSet (DSet _) := DSet.ofList x

class Analysis (g : Graph) (Œ± : Type*) where
  Œ∑ : Mem ‚Üí Mem' Œ±
  A : State ‚Üí Set (Mem' Œ±)
  A_correct‚ÇÅ :
    ‚àÄ e ‚àà g.edges, ‚àÄ œÉ, Œ∑ œÉ ‚àà A e.source ‚Üí ‚àÉ œÉ' ‚àà ùíÆ e.action œÉ, Œ∑ œÉ' ‚àà A e.target

inductive Sign where | minus | zero | plus
deriving DecidableEq

instance : Repr Sign where
  reprPrec s _ := match s with | .minus => "-" | .zero => "0" | .plus => "+"

instance [Repr Œ±] : Repr (Mem' Œ±) where
  reprPrec œÉ _ :=
    "mem' {" ++
      (œÉ.dom.attach.map (fun x ‚Ü¶ x ++ " ‚Ü¶ " ++ reprStr (œÉ.read x)) |>.intersperse ", " |> String.join)
    ++ "}"

def Sign.ofInt : ‚Ñ§ ‚Üí Sign
| 0 => .zero
| n => if n < 0 then .minus else .plus

def Sign.represent : Sign ‚Üí DSet ‚Ñ§
| .minus => {-1, -2}
| .zero => {0}
| .plus => {1, 2}

#eval mem { x ‚Ü¶ 12 }.map' Sign.ofInt
#eval mem { x ‚Ü¶ 12 }.map' Sign.ofInt |>.flatConcrete Sign.represent

def ùíú' : AExpr ‚Üí Mem' Sign ‚Üí Option (DSet Sign)
| .const n, _ => some {Sign.ofInt n}
| .var n, œÉ => if h : n ‚àà œÉ.dom then some {œÉ.read ‚ü®n, h‚ü©} else none
| aexpr {~a + ~b}, œÉ => sorry
| _, _ => sorry

def ùíú'' (a : AExpr) (œÉ : Mem' Sign) : DSet Sign :=
  œÉ.flatConcrete Sign.represent |>.image (ùíú a) |>.filterMap (¬∑) |>.image Sign.ofInt
  -- sorry

#eval ùíú'' (aexpr { x - y }) (mem { x ‚Ü¶ 1, y ‚Ü¶ 1, z ‚Ü¶ 3 }.map' Sign.ofInt)

theorem asdasd : ‚àÄ z ‚àà ùíú a œÉ, Sign.ofInt z ‚àà ùíú'' a (œÉ.map' Sign.ofInt) := by
  intro z h
  simp_all
  induction a generalizing œÉ z
  next n =>
    simp_all [ùíú]
    subst_eqs
    simp_all [ùíú'']
    use n
    simp_all [ùíú, Mem'.flatConcrete]

    sorry
  next v =>
    simp_all [ùíú]
    obtain ‚ü®h, h'‚ü© := h
    subst_eqs
    simp_all [ùíú'']
    sorry
  next => sorry

instance (g : Graph) : Analysis g Sign where
  Œ∑ œÉ := œÉ.map' Sign.ofInt
  A := sorry
  A_correct‚ÇÅ := sorry



end GCL

#min_imports
